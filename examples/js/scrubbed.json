[
  {
    "title": "",
    "headers": []
  },
  {
    "title": "arduinoBrakelightBackpack",
    "headers": [
      {
        "header": "About",
        "text": "The BrakeLight backpack is a wearable project intended to make biking a safer and more enjoyable experience. Esentially, the wearer can indicate the direction he wishes to turn by pushing a button on his bike handle. The backpack will then light up with the corresponding arrow to let traffic behind him know. Additionally, the built in accelerometer will detect when the user is slowing down and will have the entire backpack light up. This project was created using arduino and flora microcontrollers along with Adafruit parts.",
        "jotNotes": []
      },
      {
        "header": "Dates",
        "text": "August 2014 - September 2014",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "dinnerBell",
    "headers": [
      {
        "header": "About ",
        "text": "Dinner bell is a one page webpage application designed to allow students living on residence to vote on a common dinner time to ensure everyone can eat together. This application was designed using HTML, CSS, PHP, and mySQL as my first attempt at backend development.",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "MySQL",
          "jQuery",
          "HTML",
          "CSS",
          "php"
        ]
      },
      {
        "header": "Links",
        "text": " ",
        "jotNotes": [
          "www.dinnerbell.vishalkuo.com"
        ]
      },
      {
        "header": "Notes:",
        "text": "Note that many of the php files contain```php<?  $username = \"root\";  $password = \"root\";  $database = \"time\";```These are dummy variables to access a local MySQL server. They will not help in accessing my public server. I am currently working on connecting the AJAX and PHP more elegantly. Code such as```javascript  if (times[1][\"time\"] !== \"\")  {    $(\"#t1\").text(times[1][\"time\"] + \" = \" + times[1][\"Votes\"] + \" vote(s)\");  }```is a temporary workaround to checking if the MySQL query is empty. Future releases will involve more structured queries and more structure in the PHP code.",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "dotDash",
    "headers": [
      {
        "header": "About",
        "text": "dotDash is a minimal Text to Morse and Morse to Text translator created as my introduction to Android development. The project exists on the <a href =https://play.google.com/store/apps/details?id=com.vishalkuo.dotDash&hl=e />Google Play Store</a>n and currently has updates rolling out. ",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "Java"
        ]
      },
      {
        "header": "Links",
        "text": "",
        "jotNotes": [
          "Android App: https://play.google.com/store/apps/details?id=com.vishalkuo.dotDash&hl=e"
        ]
      },
      {
        "header": "Notes",
        "text": "Currently underway is an attempt to improve the UI including a neater layout and styled buttons. There are certain blocks of commented code in the MainActivity such as   ```Java  Context context = this;        PackageManager pm = context.getPackageManager();        if (!pm.hasSystemFeature(PackageManager.FEATURE_CAMERA))        {            Log.e(\"ERR\", \"NO CAMERA\");            Toast.makeText(getApplicationContext(), \"Your device doesn't have a camera!\",                    Toast.LENGTH_SHORT).show();            return;        }  ```  This code is intended to create a camera flash functionality to represent the Morse Code. I was initially unable to implement this because I lacked an Android device to test with. However, I have aquired a device since and attempting to include this feature in the next relase. ##EDITThe flash functionality is now working, to an extent. Two problems are still apparent:There is no way to asynchronously countrol the flash as the camera object requires the UI thread (main context) to preview/not preview.I have had some issues with the camera not being released properly. This only happened during testing and installation; however, it could very well crop up in daily use. I am working on this.Camera timer achieved through the following:```Java for (int i = 0; i < intVals.length; i++){            int handlerInt = (intVals[i] == 0)? _DOT : _DASH;            cam.startPreview();            try {                Thread.sleep(handlerInt);            } catch (InterruptedException e) {                e.printStackTrace();            }            cam.stopPreview();            try {                Thread.sleep(400);            } catch (InterruptedException e) {                e.printStackTrace();            }        }``` For now, thread.sleep must be used until I can determine if it is at all possible to implement a varying interal task using handlers. For now, more research is required.        ",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "FuturesRevealed",
    "headers": [
      {
        "header": "About",
        "text": "Futures Revealed is a Canadian organization created to help high school students handle the transition from graduation to their post-secondary path. This projet involved the creation of the offical application on both Android and iOS platforms to help the organization better connect and inform the students it's trying to help. The official applications are set to be released September 2015. ",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "Objective-C",
          "Java",
          "MySQL",
          "PHP",
          "AngularJS (for administration)"
        ]
      },
      {
        "header": "Links",
        "text": " * <a href = http://www.futuresrevealed.ca />Official Futures Revealed Website </a>",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "gitScrub",
    "headers": [
      {
        "header": "Status",
        "text": "[![Build Status](https://travis-ci.org/vishalkuo/gitScrub.svg?branch=master)](https://travis-ci.org/vishalkuo/gitScrub)[![Coverage Status](https://coveralls.io/repos/vishalkuo/gitScrub/badge.svg?branch=master&service=github)](https://coveralls.io/github/vishalkuo/gitScrub?branch=master)[![Dependencies](https://david-dm.org/vishalkuo/gitscrub.svg)](https://david-dm.org/vishalkuo/gitscrub.svg)[![NPM](https://nodei.co/npm/gitscrub.png?compact=true)](https://nodei.co/npm/gitscrub/)",
        "jotNotes": []
      },
      {
        "header": "Installation",
        "text": "### .gitignore ###```gitignore#Other file namessecret.js```### secret.js ###```Javascript   secret = module.exports;  secret.username = YOUR_GITHUB_USERNAME  secret.password = YOUR_GITHUB_PASSWORD```",
        "jotNotes": [
          "In your npm project directory: ```npm install --save gitscrub```",
          "In your project: ```var gs = require('gitscrub')```",
          "To save username and passcode, first add a filename to your .gitignore. I called mine secret.js. Open this up in project root by typing ```nano .gitignore```"
        ]
      },
      {
        "header": "Usage",
        "text": "```Javascriptvar gs = require('gitscrub')var secret = require('./path_to_secret.js')var options = null//Options object is a WIP, feel free to pass in null at the moment.gitscrub.scrubadubdub(secret.username, secret.password, options, function(data){  for (i = 0; i < data.length; i++){    console.log(data[i].title )    console.log(data[i].headers)  }})```",
        "jotNotes": []
      },
      {
        "header": "GitScrub Format",
        "text": "```[{title: 'repo title',  headers:[      {        header: 'header title',        text: 'header text',        jotNotes: [jotNote1, jotNote2, ...],      }      //Rest of your headers...    ]  }//Rest of your repos...]```",
        "jotNotes": [
          "Always start headers with ```## ``` (space included)",
          "Title will always start with ```# ```",
          "Jot notes will be parsed into their own array inside of each header object. Be prepared for that",
          "Headers ```###``` or longer will simply be included in the most recent header object.",
          "Code blocks are not formatted yet. This is a feature that welcomes a PR. ",
          "Output format is structured as follows: "
        ]
      },
      {
        "header": "About",
        "text": "This is a formatted readme, it will look for ```##``` headers and parse them into objects to be added to a json array. In this case, this section should be added to about. Now I'm just rambling on to fill the about section.",
        "jotNotes": []
      },
      {
        "header": "Dates",
        "text": "July 2015 - Present  ",
        "jotNotes": []
      },
      {
        "header": "Links",
        "text": "http://www.github.com/vishalkuo.gitScrub",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "nodeJS",
          "Github API",
          "RSVPromise",
          "Restler"
        ]
      },
      {
        "header": "Notes",
        "text": "It is reccomended that gitScrub be run as a cronjob (nightly or weekly) and its outputs be saved into a file instead of loading it each time that a resource requires it. The parsing takes as long as 2 seconds (on a 2013 15-inch Macbook Pro), for only 15 repos of which many have null or one-liner readmes. ",
        "jotNotes": []
      },
      {
        "header": "Contributors",
        "text": "",
        "jotNotes": [
          "[Jerry Wang](https://github.com/yisenjerrywang)",
          "[Chris Grandoit](https://twitter.com/cgrandoit) (for inspiration)",
          "Vishal Kuo"
        ]
      }
    ]
  },
  {
    "title": "Grumble",
    "headers": [
      {
        "header": "About",
        "text": "Grumble is a node.js application designed to elegantly organize and display the meals being served at various cafeterias around the University of Waterloo. This application was my first attempt at server side javascript, it was built using node.js, jade, and the Express framework. Current expansion involves adding an upvote feature using mongoDB.",
        "jotNotes": []
      },
      {
        "header": "Dates",
        "text": "February 2015 - March 2015",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "express.JS",
          "Jade",
          "jQuery"
        ]
      },
      {
        "header": "Links",
        "text": "",
        "jotNotes": [
          "www.grumblevkuo.herokuapp.com"
        ]
      },
      {
        "header": "Installation",
        "text": "Originally, the project could have been run by cloning and running the app in your browser, ```localhost:3000```. Unfortunately,since the provisioning and use of a Postgres database through heroku, this is no longer possible.",
        "jotNotes": []
      },
      {
        "header": "Notes",
        "text": "In ```node_modules/ignoreModule```, there are no modules visible. This is an ignored file as it contains a Waterloo API token as seen in ```index.js``````javascript var apiToken = ignore.ignoreModule();``` If you wish to request a token, it can be done so [here](https://api.uwaterloo.ca/).",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "Material Design Lite",
    "headers": [
      {
        "header": "Use MDL on your site?",
        "text": "**This document is targeted at developers that will contribute to or compileMDL. If you are looking to use MDL on your website or web app please head to[getmdl.io](http://getmdl.io).**",
        "jotNotes": []
      },
      {
        "header": "Browser Support",
        "text": "| IE9 | IE10 | IE11 | Chrome | Opera | Firefox | Safari | Chrome (Android) | Mobile Safari ||-----|------|------|--------|-------|---------|--------|------------------|---------------|| B   | A    | A    | A      | A     | A       | A      | A                | A             |A-grade browsers are fully supported. B-grade browsers will gracefully degradeto our CSS-only experience.",
        "jotNotes": []
      },
      {
        "header": "Getting Started",
        "text": "### Download / CloneClone the repo using Git:```bashgit clone --bare https://github.com/google/material-design-lite.git```Alternatively you can [download](https://github.com/google/material-design-lite/archive/master.zip)this repository.Windows users, if you have trouble compiling due to line endings then make sure you configure git to checkout the repository with `lf` (unix) line endings. This can be achieved by setting `core.eol`.```git config core.eol lfgit config core.autocrlf input```> Remember, the master branch is considered unstable. Do not use this in production. Use a tagged state of the repository, npm, or bower for stability!### What's includedIn the repo you'll find the following directories and files.| File/Folder     | Provides                                       ||-----------------|------------------------------------------------|| CONTRIBUTING.md | MDL contribution guidelines.                   || docs            | Files for the documentation site.              || gulpfile.js     | gulp configuration for MDL.                    || LICENSE         | Project license information.                   || package.json    | npm package information.                       || README.md       | Details for quickly understanding the project. || src             | Source code for MDL components.                || templates       | Example templates.                             || test            | Project test files.                            |### BuildTo get started modifying the components or the docs, first install the necessarydependencies, from the root of the project:```bashnpm install && npm install -g gulp```Next, run the following one-liner to compile the components and the docs andspawn a local instance of the documentation site:```bashgulp serve```Most changes made to files inside the `src` or the `docs` directory will causethe page to reload. This page can also be loaded up on physical devices thanksto BrowserSync.To build a production version of the components, run:```bashgulp```This will clean the `dist` folder and rebuild the assets for serving.### TemplatesThe `templates/` subdirectory contains a few exemplary usages of MDL. Templateshave their own, quasi-separate gulp pipeline and can be compiled with`gulp templates`. The templates use the vanilla MDL JS and[themed](http://www.getmdl.io/customize/index.html) CSS files. Extraneous stylesare kept in a separate CSS file. Use `gulp serve` to take a look at thetemplates:> Templates are not officially supported in IE9 and legacy browsers that do notpass the minimum-requirements defined in our[cutting-the-mustard test](https://github.com/google/material-design-lite/blob/master/src/mdlComponentHandler.js#L262-L275).",
        "jotNotes": [
          "[Blog Template](http://www.getmdl.io/templates/blog)",
          "[Dashboard Template](http://www.getmdl.io/templates/dashboard)",
          "[Text Heavy Webpage Template](http://www.getmdl.io/templates/text-only)",
          "[Stand Alone Article Template](http://www.getmdl.io/templates/article)",
          "[Android.com MDL Skin Template](http://www.getmdl.io/templates/android-dot-com)"
        ]
      },
      {
        "header": "Versioning",
        "text": "For transparency into our release cycle and in striving to maintain backwardcompatibility, Material Design Lite is maintained under[the Semantic Versioning guidelines](http://semver.org/). Sometimes we screw up,but we'll adhere to those rules whenever possible.",
        "jotNotes": []
      },
      {
        "header": "Feature requests",
        "text": "If you find MDL doesn't contain a particular component you think would beuseful, please check the issue tracker in case work has already started on it.If not, you can request a [new component](https://github.com/Google/material-design-lite/issues/new?title=[Component%20Request]%20{Component}&body=Please%20include:%0A*%20Description%0A*%20Material%20Design%20Spec%20link%0A*%20Use%20Case%28s%29).Please keep in mind that one of the goals of MDL is to adhere to the MaterialDesign specs and therefore some requests might not be within the scope of thisproject.",
        "jotNotes": []
      },
      {
        "header": "Do you include any features that a framework comes with?",
        "text": "Material Design Lite is focused on delivering a vanilla CSS/JS/HTML library ofcomponents. We are not a framework. If you are building a single-page app andrequire features like two-way data-binding, templating, CSS scoping and soforth, we recommend trying out the excellent [Polymer](http://polymer-project.org) project.",
        "jotNotes": []
      },
      {
        "header": "License",
        "text": "© Google, 2015. Licensed under an [Apache-2](https://github.com/google/material-design-lite/blob/master/LICENSE) license.",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "pasteDump",
    "headers": [
      {
        "header": "About",
        "text": "Paste Dump was inspired during my first co-op term when I was conducting device compatibility testing for my company's software. A big issue I ran into during testing was that I would need links, or access tokens, that would have to be painfully typed in by hand on each device. Furthermore, some of the devices could not even sign into an email client due to some security settings previously applied. I decided to create pasteDump for iOS and Android which would allow for fast link sharing between devices on various platforms using either a simple authentication system or a more popular Facebook single sign-on system. ",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "Objective-C",
          "Java",
          "MySQL",
          "PHP"
        ]
      },
      {
        "header": "Links",
        "text": " * iOS App: https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=998402366&mt=8",
        "jotNotes": []
      }
    ]
  },
  {
    "title": "StarRush",
    "headers": [
      {
        "header": "About",
        "text": "Star Rush is an arcade style shooter developed for iOS versions 7 and up. This was my culminating project for my grade 12 Computer Engineering Class.",
        "jotNotes": []
      },
      {
        "header": "Dates",
        "text": "February 2014 - August 2014",
        "jotNotes": []
      },
      {
        "header": "Links",
        "text": "",
        "jotNotes": [
          "https://itunes.apple.com/us/app/star-rush-prologue/id888866305?mt=8"
        ]
      }
    ]
  },
  {
    "title": "Summon (A.K.A. Genie)",
    "headers": [
      {
        "header": "About",
        "text": "Summon is a realtime service app that allows customers at restaurants to connect to the restaurant's server hub when they scan a QR code with an Android device. The customers will maintain a session with that hub as long as they remain on the restaurant's Wi-Fi. During that time, they can use the Summon app to quickly refills, their check, or type in their own custom request. Since this project was created for the toast hack-a-thon, it also has the capability to query the toast database to download the latest menu from the restaurant so that a customer can quick order from this app without having to wait for a server to come over. The server, connected through a simple live webpage, will receive updates indicating which table is requesting what and how many requests that customer has made. ",
        "jotNotes": []
      },
      {
        "header": "Technologies",
        "text": "",
        "jotNotes": [
          "Postgres",
          "express.js",
          "socket.io",
          "Java",
          "Objective-C",
          "Jade",
          "jQuery"
        ]
      }
    ]
  }
]
